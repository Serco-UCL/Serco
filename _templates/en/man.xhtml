<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE html
   PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" >

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title></title>
    <style type="text/css" xml:space="preserve">@media print {#ghostery-purple-box {display:none !important}}</style>
    <style type="text/css" xml:space="preserve">
        pre {
    /*display: inline-block;*/
    padding: 5px ;
    width: 300px;
    /*margin-right: 20%;*/
    background: none repeat scroll 0 0 #f9f9f9;
    border: 1px solid #EEE;
    }
    
    h1, h2, h3, h4, h5, h6 {
    margin-top: 30px;
    font-weight: 300;
    color: #4653b4;
}
    body {
    padding-right: 20px;
    padding-left: 20px;
}
    .param{
        font-weight: bold;
        margin: 0;
        color: #369;
    }
    </style>
  
  </head>
  <body>
    <h2>
      Description
    </h2>
      <p>
          <H4>What is the purpose of the "Serco" ?</H4>
          To offer a simple and adapted way for the realization of learning's exercises, to carry out searches in "collections" "freely accessible", "structured", "textual", "relatively big, "stables" and "adapted for learning"
          <ul>      
              <li>"collections" : A collection is a list of elements of the same type, of the same family.</li>
              <li>"freely accessible" : The content of a collection must be completely free of access, use and dissemination. No private data or protected by any limitation of difusion's right can be made available to users by this service that is "Open".</li>
              <li>"structured" : Each item in a collection is composed of the same list of fields as all items in the collection. (Typical example: an array of data, where each row represents one element and each column a field)</li>
              <li>"textual" : The content of each field is composed of simple text and treated as such. Fields can contain any form of character string, which can be text, numbers, date or other. But searches are only performed based on the textual content of the field.</li>
              <li>"relatively big" : The tool is intended to provide collections typically ranging from a few hundred items to several thousand,</li>
              <li>"stables" : The collections made available through Serco must be little evolutive. They must be stable enough and require only a few updates, or ideally none.</li>
              <li>"adapted for learning" : A collection must be able to be derived in "subsets" of the same structure, and to the content adapted to the different levels of study of the learners</li>
          </ul>
          Typical collection's example: the ICD10 classification (International Classification of Diseases) which, in Serco, can be derived in a series of "subsets" of the same structure, adapted to different levels of learners
      </p>
      <p>
          <H4>How do we achieve this goal?</H4>
          Mainly by the implementation of a service REST that handles all the necessary interactions with Serco and can be implemented in any system that needs to interact with the service.
          Currently two implementations are freely available:
          <ul>      
              <li>A web interface</li>
              <li>A Moodle's "QuestionType" plugin</li>
          </ul>
      </p>
    <h2>
      Parameters
    </h2>
      <ul>      
      <li>
        <p class="param">info</p> 
        If this parameter is used, the query will return the list of Usable Collections <br /> <br />
      </li>
        
      <li>
       <p class="param"> doc : </p>
       If this parameter is used, the query will return the tool documentation.<br /><br />
      </li>
      <li>
        <p class="param">related : {collectionType:collection?}</p>
        Type of collection and collection on which to base the search. If no collection specified, the default one is used. <br /> <br />      </li>
      <li>
        <p class="param">query : varchar()</p>
        Character string that will be searched in the collection<br /><br />
        
      </li>
      <li>
        <p class="param">offset : int()</p>
        Start position of the request<br /><br />
      </li>
      <li>
        <p class="param">limit : int()</p>        
        Number of returned results<br /><br />
      </li>
      <li>
        <p class="param">order : ASC | DESC </p>
        Sort in ascending or descending order <br /><br />
      </li>
      <li>
        <p class="param">format : xml | json | html </p>
        Response Format<br /><br />
      </li>
      <li>
        <p class="param">lang : fr | en </p>
        Tool language<br /><br />
      </li>
    </ul>

    <h2>
      Output
    </h2>
      
    <h4>ResponseHeader</h4>
    <pre>array responseHeader {
      Param[] params;
      int status;
      string error;
      float QTime;
    }
    </pre>
    <h4>Response</h4>
    <pre>array response {
      int total;
      int nbFound;
      Collection_Type[] docs;
    }
    </pre>
        
    <h4>Collection_Type</h4>
    <pre>array Collection_Type {
      string ref;
      string name;
      string description;
      int defaultColl;
      Collection[] collections;
      Fields[] fields;
    }
    </pre>
        
    <h4>Collection</h4>
    <pre>array Collection {
      string ref;
      string name;
      string description;
      dateTime last_update;
    }
    </pre>
        
    <h4>Field</h4>
    <pre>array field {
      string libelle;
      string description;
      int priority;
      boolean searchable;
    }
    </pre>
  </body>
</html>